{"version":3,"sources":["InfoBox.js","Map.js","Table.js","util.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","total","Card","className","CardContent","Typography","color","Map","Table","countries","map","country","sortData","data","sort","a","b","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","casesType","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","countryInfo","setCountryInfo","tableData","setTableData","name","iso2","sortedData","getCountriesData","onCountryChange","e","countryCode","target","url","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","recovered","todayDeaths","deaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b5c42a1b.chunk.js","sourcesContent":["import { Card } from '@material-ui/core'\nimport React from 'react'\nimport { CardContent, Typography} from \"@material-ui/core\";\n\nfunction InfoBox({title, cases, total}) {\n    return (\n        <Card className=\"infoBox\">\n            <CardContent>\n                {/* Title */}\n                <Typography className=\"infoBox__title\" color=\"textSecondary\">\n                    {title}\n                </Typography>\n\n                {/* Number of cases */}\n                <h2 className=\"infoBox__cases\">{cases}</h2>\n\n\n                 {/* Total cases */}\n                 <Typography className=\"infoBox__total\" color=\"textSecondary\">\n                     {total}\n                 </Typography>\n\n            </CardContent>\n        </Card>\n       \n    )\n}\n\nexport default InfoBox\n","import React from 'react'\n\nfunction Map() {\n    return (\n        <div className=\"map\">\n        <h1>I am a Map</h1>\n            \n        </div>\n    )\n}\n\nexport default Map\n","import React from 'react'\nimport './Table.css';\n\nfunction Table({countries}) {\n    return (\n        <div className=\"table\">\n        {/* Go through all of the countries and map them */}\n        {/* Destructuring the code so cases and country are separately stored */}\n        {countries.map(({country, cases}) => (\n            <tr>\n                <td>{country}</td>\n                <td><strong>{cases}</strong></td>\n            </tr>\n        ))}\n            \n        </div>\n    )\n}\n\nexport default Table\n","export const sortData = (data) => {\n    const sortedData = [...data];\n    return sortedData.sort((a,b) => (a.cases > b.cases ? -1:1));\n\n}\n\n\n// export const buildChartData = (data,casesType=\"cases\") =>{\n//     const chartData = [];\n//     let lastDataPoint;   \n\n//     data[casesType].forEach((date)=>{\n//         if(lastDataPoint){\n//             const newDataPoint = {\n//                 x:date,\n//                 y:data[casesType][data] - lastDataPoint,\n//             };\n\n//            chartData.push(newDataPoint);\n//         }\n//         lastDataPoint = data[casesType][date];\n//     });\n//     return chartData;\n// };","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          // Include a dollar sign in the ticks\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nconst buildChartData = (data, casesType) => {\n  let chartData = [];\n  let lastDataPoint;\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint,\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  }\n  return chartData;\n};\n\nfunction LineGraph({ casesType=\"cases\" }) {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          let chartData = buildChartData(data, casesType);\n          setData(chartData);\n          console.log(chartData);\n          // buildChart(chartData);\n        });\n    };\n\n    fetchData();\n  }, [casesType]);\n\n  return (\n    <div>\n      {data?.length > 0 && (\n        <Line\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                borderColor: \"#CC1034\",\n                data: data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;","import React from 'react';\nimport './App.css';\nimport FormControl from '@material-ui/core/FormControl';\nimport { Card, CardContent, MenuItem, Select } from '@material-ui/core';\nimport {useState, useEffect} from 'react';\nimport InfoBox from \"./InfoBox\";\nimport Map from './Map';\nimport Table from './Table';\nimport { sortData } from './util';\nimport LineGraph from './LineGraph';\n\nfunction App() {\n\n\n  const [countries, setCountries] = useState([]);\n  //setting up default country for select icon\n  const [country, setCountry] = useState('worldwide');\n\n  //country info state\n  const [countryInfo, setCountryInfo] = useState({});\n\n  //table data\n  const [tableData, setTableData] = useState([]);\n\n\n\n    useEffect(() => {\n      fetch(\"https://disease.sh/v3/covid-19/countries/all\")\n      .then(response=> response.json())\n      .then(data=>{\n        setCountryInfo(data);\n      });\n    }, [])\n\n\n \n  //USE EFFECT = Runs code based on a given condition [] is the condition\n  //[] is left blank it will only run once when the app loads\n  //in our case we need the effect to run when the countries change\n  useEffect(() => {\n    //async -> send a request to the server, wait for it, do something with info\n    const getCountriesData = async () =>{\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      //take the response and get the json from the fetch response\n      .then((response) => response.json())\n      //then set the countries but need to restructure before storing\n      .then((data) =>{\n        //going through every country \n        //return a object with required\n        //here country is the object looped in\n        const countries = data.map((country) =>(\n          {\n            \n            name: country.country,\n            value: country.countryInfo.iso2,\n\n          }\n          \n          ));\n          //sorting the data here\n          const sortedData = sortData(data);\n          //put the countries we mapped through\n          setCountries(countries);\n          //getting the data for the table from this function\n          setTableData(sortedData);\n      });\n\n  \n\n    };\n    \n    //handling async call here by calling function again\n    getCountriesData();\n\n  \n  }, [countries]);\n\n\n\n  //OnCountryChange Function \n  //takes in an event e\n  const onCountryChange = async (e) =>{\n\n      //this stores the country we select\n      const countryCode = e.target.value;\n      \n      //Then we set the default value here for the select button\n      setCountry(countryCode);\n\n      //as here is where the country selection is handled\n      //I need to implement the getting the data part here\n      //https://disease.sh/v3/covid-19/all\n      //https://disease.sh/v3/covid-19/countries/{COUNTRY_CODE}\n      //need to implement : if country code is worldwide do that\n      //otherwise do the country code\n\n      //so if country code is worldwide we made this the url\n      const url = countryCode ==='worldwide' ? 'https://disease.sh/v3/covid-19/all' :\n      `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n      //go to the url\n      await fetch(url)\n        //once we  get the information \n        //turn it into json object\n        .then(response => response.json())\n        //then we do stuff with the data\n        .then(data=> {\n          //update the input \n          setCountry(countryCode);\n          //store the response of the country info into a variable\n          \n          setCountryInfo(data);\n\n      });\n      \n  };\n\n\n\n\n\n  return (\n    <div className=\"app\">\n\n      {/* Application Left Side */}\n      <div className=\"app__left\">\n          {/* Header */}\n\n        {/* Title + Select input dropdown field */}\n\n        <div className=\"app__header\">\n          <h1>Covid 19 Tracker</h1>\n\n            <FormControl className=\"app_dropdown\">\n                  {/* Here value is set to worldwide as default to show in the select box */}\n                <Select variant=\"outlined\" value={country} onChange={onCountryChange}>\n                  {/* DropDown menu from material UI */}\n                  {/* Loop through all the countries and drop them down */}\n                  {/* <MenuItem value=\"worldwide\">worldwide</MenuItem> */}\n                  {/* JSX */}\n                  <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n                  {\n                    countries.map(country=>(\n\n                      <MenuItem value={country.value}>{country.name}</MenuItem>\n                    ))\n                  }\n                </Select>\n            </FormControl>\n        </div>\n\n\n          {/*  */}\n        <div className=\"app__stats\">\n          {/* InfoBox  title = CoronaVirus cases*/}\n            <InfoBox title=\"Coronavirus cases\" cases={countryInfo.todayCases} total={countryInfo.cases}/>\n          {/* InfoBox title = Coronavirus recoveries */}\n            <InfoBox title=\"Recovered\" cases={countryInfo.todayRecovered} total={countryInfo.recovered}/>\n          {/* InfoBox title= corona deaths*/}\n            <InfoBox title=\"Deaths\" cases={countryInfo.todayDeaths} total={countryInfo.deaths}/>\n        </div>\n\n\n        {/* Map */}\n        <Map/>\n      </div>\n\n      {/* Application Left Side */}\n      <Card className=\"app__right\">\n        <CardContent>\n          {/* Table */}\n          <h1>Live Cases By Country</h1>\n          <Table countries={tableData}/>\n          {/* Graph */} \n          <h3>Worldwide new cases</h3>\n          <LineGraph/>\n        </CardContent>\n      </Card>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}